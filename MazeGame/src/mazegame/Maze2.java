/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mazegame;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author akggupta
 */
public class Maze2 extends javax.swing.JPanel implements Runnable {

    private Thread animator;
    Random random;
    LinkedList<Integer> pathWidth;
    LinkedList<Integer> pathHeights;
    final int numBlocks =64;
    final int gamespeed = 94;
    final int difficutly = 50;
    final int minWidth = 30;
    final int maxWidth = 300;
    boolean start = false;
    int score = 0;
    Robot robot;

    /**
     * Creates new form Maze2
     */
    JFrame jf;

    public Maze2() throws AWTException {
        jf = new JFrame();
        jf.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //jf.setUndecorated(true);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pathWidth = new LinkedList<>();
        pathHeights = new LinkedList<>();
        random = new Random();
        for (int i = 0; i < numBlocks; i++) {
            pathWidth.add(300);
        }
        for (int i = 0; i < numBlocks; i++) {
            pathHeights.add(150);
        }
        robot = new Robot();
        initComponents();
        jf.add(this);
        jf.setVisible(true);
    }

    public static void main(String[] args) throws AWTException, InterruptedException {
        while(true){
        new Maze2();
            Thread.sleep(100);
        }
        
    }

    @Override
    public void addNotify() {
        super.addNotify();
        animator = new Thread(this);
        animator.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

    }//GEN-LAST:event_formMouseMoved

    public void nextCycle(int steapness) {
        if (!start) {
            return;
        }
        int in = random.nextInt(steapness);
        boolean iodWidth = random.nextBoolean();
        boolean iodYcrd = random.nextBoolean();
        for (int i = 0; i < in; i++) {
            try {
                Thread.sleep(100 - gamespeed);
            } catch (InterruptedException e) {
                System.out.println("interrupted");
            }
            pathWidth.pollFirst();
            if (pathWidth.peekLast() < minWidth) {
                iodWidth = true;
            }
            if (pathWidth.peekLast() > maxWidth) {
                iodWidth = false;
            }
            pathWidth.add(pathWidth.peekLast() + (iodWidth ? 1 : -1));
            pathHeights.pollFirst();
            if (pathHeights.peekLast() < 100) {
                iodWidth = true;
            }
            if (pathHeights.peekLast() > this.getHeight()-maxWidth-30) {
                iodWidth = false;
            }
            pathHeights.add(pathHeights.peekLast() + (iodYcrd ? 1 : -1));
            repaint();
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Color bc = new Color(pathWidth.get(0));
        Graphics2D g2d = (Graphics2D) g;
        g2d.setColor(Color.blue);
        if (start) {
            g2d.setColor(Color.red);
            this.setBackground(bc);
        }
        for (int i = 0; i < pathWidth.size(); i++) {
            g2d.fillRect((this.getWidth() * i) / numBlocks, pathHeights.get(i) , this.getWidth() / numBlocks, pathWidth.get(i));
        }

        g2d.setColor(Color.BLACK);
        if (!start) {
            g2d.drawLine(900, 150, 900, 450);
        }
        g2d.setFont(new Font("", Font.BOLD, 30));
        if (!start) {
            g2d.drawString("Created by - Akshay Gupta", 100, 100);
            g2d.drawString("Go to blue Area Move the curser to line stay in red area", 100, 140);
        } else {
            g.setColor(Color.ORANGE);
            g2d.drawString("Current Score " + score, 100, 100);
        }
        g.dispose();
    }

    int getZone() {
        Point p = MouseInfo.getPointerInfo().getLocation();
        if (p.x > 900 && p.y < 450 && p.y > 150) {
            return 1;
        }
        Color currentPiColor = robot.getPixelColor(p.x, p.y);
        if (!currentPiColor.equals(Color.red) && !currentPiColor.equals(Color.blue) && start) {
            return 2;
        }
        return 0;
    }

    @Override
    public void run() {
        //while(!start);
        game:
        while (true) {
            if (start) {
                score++;
            }
            int currentZone = getZone();
            switch (currentZone) {
                case 1:
                    start = true;
                    break;
                case 2:
                    jf.dispose();
                    JOptionPane.showMessageDialog(null, "Final score "+score);
                    break game;
            }

            nextCycle(40);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
